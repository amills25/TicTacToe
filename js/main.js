//TicTacToe Game Class
class TicTacToe {
    constructor() { // <-- i will need to put things in constructor
    //Model
        //example of game array
        // this.array = [
        //     [0, 0, 0],
        //     [0, 0, 0],
        //     [0, 0, 0],
        // ];

        this.gridArray = [];

        //linking dynamic rendering to html
        this.app = document.getElementById("app");
    }

    //View methods
    generateView() {
        //procedural rendering
        let container = this.generateHTML({ type: 'div', classes: 'container', parent: this.app });
        let row = this.generateHTML({ type: 'div', classes: 'row', parent: container, styles: '', id: 0 });
        //let col = generateHTML({ type: 'div', classes: 'col-4 text-center border border-dark lh-lg', parent: row, text: "", styles: 'min-width: 14vw; min-height: 16vw; font-size: 8vw', id: index });

        //dynamic rendering
        for (let index = 0; index < 9; index++) {
            let col = this.generateHTML({ type: 'div', classes: 'col-4 text-center border border-dark lh-lg', parent: row, text: "", styles: '', id: index });
            let button = this.generateHTML({ type: 'button', classes: 'btn', parent: col, text: "", styles: 'width: 99%; height: 99%; font-size: 8vw;', text: "X", onclick: "" });
            this.gridArray.push(col);
            //save tile object as well
        }

//      //variables that will get elements from Tile class and pull it's button attribute
        let tiles = document.getElementsByClassName("Tile");
        let attribute = tiles.getAttribute(tileBtn);
    }

    //method to create objects for dynamic rendering
    generateHTML({ type, classes, parent = null, text = '', styles, id, onclick }) {
        let element = document.createElement(type);
        element.className = classes;
        element.innerText = text;
        element.style = styles;
        element.id = id;
        element.onclick = onclick;

        // TODO:
        // event listeners
        // value, data, clicked

        if (parent) {
            parent.appendChild(element);
        }

        return element;
    }

    updateView() {

    }


    //Controller methods
    init() {
        console.log("init(TicTacToe)");

    }

    handleClick(e) {

    }
}


//Individual Tile Class
class Tile {
    constructor() {
        //Model

    }

    //Controller methods
    handleClick(e) {

    }

    //View methods
    //view is generated by the parent
    updateView() {

    }

}

//initializing page
function init() { //we want to reset the board first, then generate the view
    let game = new TicTacToe();
    game.generateView();
}

init();